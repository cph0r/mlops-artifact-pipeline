name: Train Model

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/train.py'
      - 'config/config.json'
      - 'requirements.txt'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/train.py'
      - 'config/config.json'
      - 'requirements.txt'
  workflow_dispatch:
    inputs:
      experiment_name:
        description: 'Name for this experiment'
        required: false
        default: 'manual-train'

jobs:
  train:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create data directories
      run: |
        mkdir -p data/raw data/processed artifacts
        
    - name: Generate sample data
      run: |
        python -c "
        import numpy as np
        import pandas as pd
        from sklearn.datasets import make_classification
        
        # Generate sample data
        X, y = make_classification(n_samples=1000, n_features=10, n_informative=5, 
                                 n_redundant=2, n_classes=2, random_state=42)
        
        # Create DataFrame
        feature_names = [f'feature_{i}' for i in range(X.shape[1])]
        df = pd.DataFrame(X, columns=feature_names)
        df['target'] = y
        
        # Split into train/test
        train_df = df.sample(frac=0.8, random_state=42)
        test_df = df.drop(train_df.index)
        
        # Save data
        train_df.to_csv('data/processed/train.csv', index=False)
        test_df.to_csv('data/processed/test.csv', index=False)
        
        print('Sample data generated successfully!')
        "
        
    - name: Run training
      run: |
        cd src
        python train.py
        
    - name: Upload training artifacts
      uses: actions/upload-artifact@v3
      with:
        name: training-artifacts-${{ github.run_number }}
        path: |
          artifacts/
          pipeline.log
        retention-days: 30
        
    - name: Run tests
      run: |
        cd tests
        python -m pytest test_train.py -v
        
    - name: Check model performance
      run: |
        python -c "
        import json
        import os
        
        # Load metrics
        with open('artifacts/metrics.json', 'r') as f:
            metrics = json.load(f)
        
        accuracy = metrics.get('accuracy', 0)
        print(f'Model accuracy: {accuracy:.4f}')
        
        # Fail if accuracy is too low (adjust threshold as needed)
        if accuracy < 0.5:
            print('‚ùå Model accuracy below threshold!')
            exit(1)
        else:
            print('‚úÖ Model accuracy meets requirements!')
        "
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let metrics = {};
          try {
            metrics = JSON.parse(fs.readFileSync('artifacts/metrics.json', 'utf8'));
          } catch (e) {
            console.log('Could not read metrics file');
          }
          
          const accuracy = metrics.accuracy || 0;
          const comment = `## üöÄ Training Results
          
          **Model Accuracy:** ${(accuracy * 100).toFixed(2)}%
          
          **Status:** ${accuracy >= 0.5 ? '‚úÖ PASSED' : '‚ùå FAILED'}
          
          Training completed successfully! Check the artifacts for more details.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 